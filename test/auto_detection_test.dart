import 'dart:io';
import 'package:country_search/country_search.dart';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('Auto Detection Tests', () {
    testWidgets('Auto Detection —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏',
        (WidgetTester tester) async {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Auto Detection –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');

      Country? selectedCountry;
      bool onCountrySelectedCalled = false;

      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: const [
            CountryLocalizations.delegate,
          ],
          supportedLocales: const [
            Locale('en'),
          ],
          home: Scaffold(
            body: CountryPicker(
              selectedCountry: selectedCountry,
              onCountrySelected: (Country country) {
                debugPrint('üéØ Auto Detection: –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ ${country.code}');
                selectedCountry = country;
                onCountrySelectedCalled = true;
              },
              autoDetectCountry: true,
            ),
          ),
        ),
      );

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –≤—ã–∑–≤–∞–Ω (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
      expect(onCountrySelectedCalled, isTrue);
      expect(selectedCountry, isNotNull);

      debugPrint(
          '‚úÖ Auto Detection: —Å—Ç—Ä–∞–Ω–∞ ${selectedCountry?.code} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    });

    testWidgets('Auto Detection –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞',
        (WidgetTester tester) async {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Auto Detection –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞');

      final initialCountry = CountryData.getCountryByCode('US')!;
      Country? selectedCountry = initialCountry;
      bool onCountrySelectedCalled = false;

      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: const [
            CountryLocalizations.delegate,
          ],
          supportedLocales: const [
            Locale('en'),
          ],
          home: Scaffold(
            body: CountryPicker(
              selectedCountry: selectedCountry,
              onCountrySelected: (Country country) {
                debugPrint('üéØ Callback –≤—ã–∑–≤–∞–Ω: ${country.code}');
                selectedCountry = country;
                onCountrySelectedCalled = true;
              },
              autoDetectCountry: true,
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ù–ï –±—ã–ª –≤—ã–∑–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
      expect(onCountrySelectedCalled, isFalse);
      expect(selectedCountry?.code, equals('US'));

      debugPrint(
          '‚úÖ Auto Detection: callback –Ω–µ –≤—ã–∑–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞');
    });

    testWidgets('Auto Detection –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω',
        (WidgetTester tester) async {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Auto Detection –∫–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω');

      Country? selectedCountry;
      bool onCountrySelectedCalled = false;

      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: const [
            CountryLocalizations.delegate,
          ],
          supportedLocales: const [
            Locale('en'),
          ],
          home: Scaffold(
            body: CountryPicker(
              selectedCountry: selectedCountry,
              onCountrySelected: (Country country) {
                debugPrint('üéØ Callback –≤—ã–∑–≤–∞–Ω: ${country.code}');
                selectedCountry = country;
                onCountrySelectedCalled = true;
              },
              autoDetectCountry: false, // –û—Ç–∫–ª—é—á–µ–Ω
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ù–ï –±—ã–ª –≤—ã–∑–≤–∞–Ω
      expect(onCountrySelectedCalled, isFalse);
      expect(selectedCountry, isNull);

      debugPrint(
          '‚úÖ Auto Detection: callback –Ω–µ –≤—ã–∑–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    });

    test('getCountryByIP –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ', () async {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º getCountryByIP');

      final country = await CountryData.getCountryByIP();

      // –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å null –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      if (country != null) {
        debugPrint('‚úÖ getCountryByIP: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ ${country.code}');
        expect(country.code, isNotEmpty);
        expect(country.flag, isNotEmpty);
        expect(country.phoneCode, isNotEmpty);
      } else {
        debugPrint(
            '‚ÑπÔ∏è getCountryByIP: —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)');
      }
    });

    test('getCountryByLocale —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ª–æ–∫–∞–ª—è–º–∏', () {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º getCountryByLocale');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ª–æ–∫–∞–ª–∏
      final testCases = [
        'en_US', // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –°–®–ê
        'ru_RU', // –†—É—Å—Å–∫–∏–π –†–æ—Å—Å–∏—è
        'de_DE', // –ù–µ–º–µ—Ü–∫–∏–π –ì–µ—Ä–º–∞–Ω–∏—è
        'fr_FR', // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –§—Ä–∞–Ω—Ü–∏—è
        'es_ES', // –ò—Å–ø–∞–Ω—Å–∫–∏–π –ò—Å–ø–∞–Ω–∏—è
        'zh_CN', // –ö–∏—Ç–∞–π—Å–∫–∏–π –ö–∏—Ç–∞–π
        'ja_JP', // –Ø–ø–æ–Ω—Å–∫–∏–π –Ø–ø–æ–Ω–∏—è
        'ko_KR', // –ö–æ—Ä–µ–π—Å–∫–∏–π –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è
      ];

      for (final locale in testCases) {
        final country = CountryData.getCountryByLocale(locale);
        if (country != null) {
          debugPrint('‚úÖ getCountryByLocale($locale): ${country.code}');
          expect(country.code, isNotEmpty);
          expect(country.flag, isNotEmpty);
          expect(country.phoneCode, isNotEmpty);
        } else {
          debugPrint('‚ùå getCountryByLocale($locale): —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      }
    });

    test('getCountryByLocale —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏', () {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º getCountryByLocale —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏');

      final testCases = [
        'en', // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π -> –°–®–ê
        'ru', // –†—É—Å—Å–∫–∏–π -> –†–æ—Å—Å–∏—è
        'de', // –ù–µ–º–µ—Ü–∫–∏–π -> –ì–µ—Ä–º–∞–Ω–∏—è
        'fr', // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π -> –§—Ä–∞–Ω—Ü–∏—è
        'es', // –ò—Å–ø–∞–Ω—Å–∫–∏–π -> –ò—Å–ø–∞–Ω–∏—è
        'zh', // –ö–∏—Ç–∞–π—Å–∫–∏–π -> –ö–∏—Ç–∞–π
        'ja', // –Ø–ø–æ–Ω—Å–∫–∏–π -> –Ø–ø–æ–Ω–∏—è
        'ko', // –ö–æ—Ä–µ–π—Å–∫–∏–π -> –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è
      ];

      for (final languageCode in testCases) {
        final country = CountryData.getCountryByLocale(languageCode);
        if (country != null) {
          debugPrint('‚úÖ getCountryByLocale($languageCode): ${country.code}');
          expect(country.code, isNotEmpty);
          expect(country.flag, isNotEmpty);
          expect(country.phoneCode, isNotEmpty);
        } else {
          debugPrint('‚ùå getCountryByLocale($languageCode): —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      }
    });

    test('autoDetectCountry –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP –∏ Locale', () async {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º autoDetectCountry');

      final country = await CountryData.autoDetectCountry();

      if (country != null) {
        debugPrint('‚úÖ autoDetectCountry: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ ${country.code}');
        expect(country.code, isNotEmpty);
        expect(country.flag, isNotEmpty);
        expect(country.phoneCode, isNotEmpty);
      } else {
        debugPrint('‚ÑπÔ∏è autoDetectCountry: —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
      }
    });

    test('Platform.localeName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç', () {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Platform.localeName');

      final locale = Platform.localeName;
      debugPrint('‚úÖ Platform.localeName: $locale');

      expect(locale, isNotEmpty);
      expect(locale, contains('_'));
    });
  });
}
